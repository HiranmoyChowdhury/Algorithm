//  Hiranmoy Das Chowdhury
#include<bits/stdc++.h>
#define bst           ios_base::sync_with_stdio(0);
#define bug(x)        cerr<<#x<<'='<<x<<endl;
#define lp(i,a,b)     for(int i=a; i<=b; i++)
#define ll            long long int
#define eb            emplace_back
#define pb            push_back
#define inp(n)        scanf("%lld", &n);
using namespace std;
ll sp_t[501][501][11];
void build(ll n){      ///here we will build sperse table..we will check every point if it has next 2^k element
    ll i, j, k, l;
    for(k=1; k<11; k++){
        for(i=1; i<=n; i++){
            for(j=1; j<=n; j++){
                ll pos=1<<(k-1);
                if(i+pos+pos-1>n || j+pos+pos-1>n) continue;
                
                ll mx=max({sp_t[i+pos][j][k-1], sp_t[i][j+pos][k-1], sp_t[i+pos][j+pos][k-1]});
                
                sp_t[i][j][k]=max(sp_t[i][j][k-1], mx);    
            }
        }
    }
}
int main(){
    ll t;
    scanf("%lld", &t);
    for(ll cas=1; cas<=t; cas++){
        ll n, i, j ,k, q;
        scanf("%lld %lld", &n, &q);
        
        for(i=1; i<=n; i++) for(j=1; j<=n; j++) scanf("%lld", &sp_t[i][j][0]);
        
        
        for(i=1; i<=n; i++) for(j=1; j<=n; j++) for(k=1; k<11; k++) sp_t[i][j][k]=-1;
        
        build(n);  ///sperse table
        
        
        printf("Case %lld:\n", cas);
        for(ll cholbe=1; cholbe<=q; cholbe++){    ///   1   2   3   4               ** here '*' is a number. so we have to
            ll x, y, s;                            //-------------------------------** use sperse table to find max value
            scanf("%lld%lld%lld", &x, &y, &s);    ///1| * | * | * | * |             ** if i=1 , j=1, s=3, then we with (1,1)
            ll base=log2(s);                      /// ------------------------------** and end with (3,3). now, will will get
            ll len=1<<base;                       ///2| * | * | * | * |             **base=1. so, sperse table give us the value
                                                  /// ------------------------------**of (1,1) to (2,2) [power=2^1]. so, we
                                                  ///3| * | * | * | * |             **just take the value of (1,2) to (2,3), 
                                                  ///-------------------------------**(2,1) to (3, 2) and (2,2) to (3,3).
                                                  ///4| * | * | * | * |             ** we will get the max value
            ll ans=sp_t[x][y][base];              ///       
            if(len<s){
                ll mx=max({sp_t[s+x-len][y][base], sp_t[x][s+y-len][base], sp_t[s+x-len][s+y-len][base]});
                ans=max(ans, mx);
            }
            printf("%lld\n", ans);
        }
    }
    return 0;
}
