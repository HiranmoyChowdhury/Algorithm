#include<bits/stdc++.h>
#define bst           ios_base::sync_with_stdio(0);
#define bug(x)        cerr<<#x<<'='<<x<<endl;
#define lp(i,a,b)     for(int i=a; i<=b; i++)
#define ll            long long int
#define eb            emplace_back
#define pb            push_back
using namespace std;
vector<ll> edge[20099];
bool check[20000], cut_point[20000];
map<pair<ll, ll>, bool> mp;
ll d[20000], low[20000], tim;
void clear(ll n){
    for(ll i=1; i<=n; i++) edge[i].clear(), check[i]=false, cut_point[i]=false;
    mp.clear(); tim=0;
    for(ll i=1; i<=n; i++) d[i]=low[i]=9999999999999999;
}


void go(ll root, ll node){          ///finding how many articulation points are there in this graph
    ll cnt=0; tim++;
    d[node]=tim;  ///it's a linear time..if it's cycle then it's perfect..for tree time will repeat...but, for this, we won't need to compare them
    low[node]=tim;
    ll limit=edge[node].size();
    check[node]=true;
    for(ll i=0; i<limit; i++){
        ll x=edge[node][i];
        if(mp[{x, node}]) continue;     ///if we already pass this edge
        mp[{x, node}]=mp[{node, x}]=true;
        if(check[x]==true){
            low[node]=min(low[node], d[x]);   ///we choose 'd[x]' instead of low[x]..cz, if there are already a cycle, low[x] doesn't exist..
                                                                                    ///if it is tree, then every subtree of 'x' will be greater than d[x]
        }
        else{
            go(root, x);
            low[node]=min(low[node], low[x]);    ///low[x] because we can travel every subtree of 'x' from node
        }
        if(d[node]<=low[x] && node!=root) cut_point[node]=true;
        cnt++;
    }
    if(cnt>1 && node==root) cut_point[root]=true;
}
 
 
 
void solve(){
    ll n, m , i, j, k, x;
    scanf("%lld %lld", &n, &m);
    clear(n);
    while(m--){
        ll u, v;
        scanf("%lld %lld", &u, &v);
        edge[u].eb(v);
        edge[v].eb(u);
    }
   
    for(i=1; i<=n; i++){
        if(check[i]==false){
            go(i, i);
        }
    }
   
    ll ans=0;
   
    for(i=1; i<=n; i++) if(cut_point[i]==true) ans++;
    printf("%lld\n", ans);
   
}
int main(){
    ll t;
    cin>>t;
    for(ll i=1; i<=t; i++){
        printf("Case %lld: ", i);
        solve();
    }
   
    return 0;
}
